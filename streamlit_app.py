import streamlit as st
import requests
import datetime

BASE_URL = "https://ai-trip-planner-f1dm.onrender.com"  # Backend endpoint

st.set_page_config(
    page_title="🌍 Travel Planner Agentic Application",
    page_icon="🌍",
    layout="centered",
    initial_sidebar_state="expanded",
)

st.title("🌍 Travel Planner Agentic Application")

# Initialize chat history
if "messages" not in st.session_state:
    st.session_state.messages = []

st.header("How can I help you plan a trip? Let me know where you want to visit.")

# ✅ Keep form first
with st.form(key="query_form", clear_on_submit=True):
    user_input = st.text_input("User Input", placeholder="e.g. Plan a trip to Goa for 5 days")
    submit_button = st.form_submit_button("Send")

    if submit_button and user_input.strip():
        # Add user message to chat history
        st.session_state.messages.append({"role": "user", "content": user_input})

        try:
            # Show spinner while backend processes
            with st.spinner("Bot is thinking..."):
                payload = {"question": user_input}
                response = requests.post(f"{BASE_URL}/query", json=payload, timeout=60)

            # Handle response
            if response.status_code == 200:
                answer = response.json().get("answer", "No answer returned.")
                formatted_answer = f"""
**🌍 AI Travel Plan**

**Generated:** {datetime.datetime.now().strftime('%Y-%m-%d at %H:%M')}  
**Created by:** Atriyo's Travel Agent

---

{answer}

---

*This travel plan was generated by AI. Please verify all information, especially prices, operating hours, and travel requirements before your trip.*
"""
                st.session_state.messages.append({"role": "bot", "content": formatted_answer})
            else:
                error_msg = f"Bot failed to respond. Status code: {response.status_code}, Details: {response.text}"
                st.error(error_msg)
                st.session_state.messages.append({"role": "bot", "content": error_msg})

        except requests.exceptions.ConnectionError:
            error_msg = "⚠️ Could not connect to the backend server. Please make sure the server is running on localhost:8000."
            st.error(error_msg)
            st.session_state.messages.append({"role": "bot", "content": error_msg})
        except requests.exceptions.Timeout:
            error_msg = "⚠️ The request to the backend server timed out. Please try again."
            st.error(error_msg)
            st.session_state.messages.append({"role": "bot", "content": error_msg})
        except Exception as e:
            error_msg = f"⚠️ An unexpected error occurred: {e}"
            st.error(error_msg)
            st.session_state.messages.append({"role": "bot", "content": error_msg})

# ✅ Display chat history *after* the form — now updates instantly
for message in st.session_state.messages:
    if message["role"] == "user":
        st.markdown(f"**You:** {message['content']}")
    else:
        st.markdown(f"**Bot:** {message['content']}")
